import { imgsURLcArte } from '../ImgURLdata.js';
import MontaCartaoArte from './CartaoArte.js';
/* test-purpose:
import DCload from './PreviewCA/LoadingGif_Mn.gif'; */
import DCbanner from '../../Entrada/InfoIntro/Banner002.png';

/*
    Aqui encontra-se c√≥digos e fun√ß√µes mistas que apoiam a cria√ß√£o dos componentes
    principais na cria√ß√£o dos cart√£o-arte da Galeria. Existem 3 Cart√µes Arte
    para teste nesse arquivo, mas recomenda-se n√£o us√°-los ativamente no projeto.
*/

/* O CAdummy gera um cart√£o com conte√∫do aleat√≥rio, e sem rela√ß√£o. √© √∫til para testar CSS
e conte√∫dos t√©cnicos, mas n√£o de forma informacional: */
export function CAdummy() {
    /*
        Optou-se que o Nome, Data e Descri√ß√£o sejam livres de gera√ß√£o, sendo ent√£o
        est√°tica/constante para qualquer chamada. Os outros dados dever√£o ser gerados aleatoriamente!
    */
    // Imagem (1):
    const array = imgsURLcArte;
    const imag = array[Math.floor(Math.random() * array.length)];
    // Info est√°tica:
    const nome = "Super Drawing Example";
    const diaC = "Da-ta-Data";
    const desc = `Esta imagem pode n√£o ser de minha autoria, e estou usando-a somente para
    exemplificar um desenho. Ela foi escolhida aleatoriamente por arquivos internos da aplica√ß√£o
    s√≥ para voc√™! N√£o √© belo?`;
    // Ferramenta (1ou+):
    const lferr = ["Desenho Anal√≥gico","MSPaint","MediBang","Blender"];
    const ferr = AgrupaDadosRandom(lferr);
    // Tem√°tica (1ou+):
    const ltema = ["Cartoon","Medievais","Esbo√ßos","Outros"];
    const tema = AgrupaDadosRandom(ltema);
    // OBS.: Pode dar erro aqui se houverem valores iguais ao randomizar
    const iden = (Math.floor(Math.random() * 1000)+1);

    const caDummy = MontaCartaoArte(imag,nome,diaC,desc,ferr,tema,iden)
    return(caDummy);
}
/* O CAcomBanner √© como o cart√£o CAdummy, por√©m tem um conte√∫do fixo. Ele √© usado para testar
dimens√µes de imagem no "PreviewCA", quando alturas e larguras s√£o discrepantes: */
export function CAcomBanner() {
    const imag = DCbanner;
    const nome = "Artem est de anima (Banner de Entrada)";
    const diaC = "Da-ta-Data";
    const desc = `Esta imagem √© de minha autoria. Estou usando-a para exemplificar
    um desenho. Descri√ß√£o do desenho Descri√ß√£o do desenho Descri√ß√£o do desenho
    Descri√ß√£o do desenho Descri√ß√£o do desenho`;
    const ferr = "MSPaint e MediBang.";
    const tema = "Outros e Cartoon.";
    
    const caCBanner = MontaCartaoArte(imag,nome,diaC,desc,ferr,tema)
    return(caCBanner);
}
/* O CAcomErro √© um cart√£o que traz propriedades com erro, e serve como um exemplo para que
o sistema reaja contra bugs, por exemplo: */
export function CAcomErro() {
    /*
    Este exemplo usa uma imagem que n√£o pode ser requisitada, a fim de demonstrar a fun√ß√£o
    do previewCA "ErroAoObterDesenho()", que adiciona um placeholder mais gr√°fico

    No longer active website list (RIP üò≠):
    * https://thishorsedoesnotexist.com/
    * https://thiscatdoesnotexist.com/
    * https://thisartworkdoesnotexist.com/ 
    */

    /* Give the no longer active website to constant "imag" */
    const imag = "https://thisartworkdoesnotexist.com/";
    const nome = "A Arte Do Erro";
    const diaC = undefined;
    const desc = "Esse desenho n√£o devia estar aqui, algo n√£o est√° certo.. Mas n√£o entre em p√¢nico: Me contate para que eu possa fazer os ajustes!";

    const caCErro = MontaCartaoArte(imag,nome,diaC,desc)
    return(caCErro);
}

// Essa fun√ß√£o transforma um grupo/array de dados em uma string formatada (montadores de cart√£o arte):
export function FormataFrase(array){
    
    let string = "";
    if (array.length === 0 || array === undefined){ // Se array estiver vazio
        console.log(`erros ao buscar o seguinte array do tipo ${typeof(array)}: "${array}"`);
        string = "Sem dados."
    } else if (array.length === 1) { // Se array tiver s√≥ 1 elemento
        string = `${array[0]}.`;
    } else if (array.length === 2) { // Se array tiver 2 elementos
        string = `${array[0]} e ${array[1]}.`
    } else {
        array.forEach(el => { // O array tem mais de 1 array
            if (el === array[0]) { // Se o elemento for o primeiro
                string = el
            } else if (el === array[array.length - 1]) { // Se o elemento for o √∫ltimo
                string = string + " e " + el + "."
            } else { // Se o elemento estiver no meio
                string = string + ", " + el
            }
        });
    }
    return(string)
}
// Essa fun√ß√£o escolhe um n√∫mero aleat√≥rio (relativo ao tamanho m√°ximo de um array):
export function numRandom_RelTamMax(array){ 
    const numero = Math.floor(Math.random() * array.length) + 1;
    return (numero)
}
// Essa fun√ß√£o escolhe uma posi√ß√£o aleat√≥ria de um array (relativa ao tamanho m√°ximo desse array):
export function posRandom_RelTamMax(array){ 
    const posicao = Math.floor(Math.random() * array.length);
    return (posicao)
}
// Essa fun√ß√£o pega um n√∫mero aleat√≥rio de itens em um array, e cria um array novo com eles:
function AgrupaDadosRandom(array){
    /*
        Para agrupar, √© preciso escolher uma quantidade de itens para agrupar, escolher
        os itens e se atentar √† n√£o escolher itens que j√° foram escolhidas/repetidamente.
    */
    
    var quantiaItems = numRandom_RelTamMax(array); // escolhe quantos itens agrupar
    let posRepetidas = []; // Array para as posic√µes de itens j√° escolhidos. (numeros)
    let allItems = []; // Ser√° o agrupamento dos nomes dos itens j√° escolhidos. (strings)
    let posDoItem = 0; // a posi√ß√£o de um item novo a ser agrupado
    let itemEscolhido = ""; // o item novo a ser agrupado no "AllItems"
    var posAleatoria = posRandom_RelTamMax(array);

    // Esse "for" agir√° enquanto o n√∫mero de itens escolhidos n√£o for satisfeito
    for(let i=0; i < quantiaItems; i++){
        if (i>0) {
            // Se n√£o-√© a primeira vez que escolho, algo j√° foi escolhido antes
            while (posRepetidas.includes(posAleatoria)) {
                posAleatoria = posRandom_RelTamMax(array);
            }
            posDoItem = posAleatoria; // a posi√ß√£o inovadora se torna a posi√ß√£o escolhida
            itemEscolhido = array[posDoItem];
            posRepetidas.push(posDoItem); // guarda a posi√ß√£o como escolhida (N√£o se repete)
            allItems.push(itemEscolhido);
        } else {
            // Se √© a primeira vez, ent√£o qualquer item do array pode ser para come√ßar
            posDoItem = posAleatoria;
            itemEscolhido = array[posDoItem];
            posRepetidas.push(posDoItem); // guarda a posi√ß√£o como escolhida (N√£o se repete)
            allItems.push(itemEscolhido);
        }
    }
    return(allItems) // retorna um array com todos os itens aleatoriamente selecionados
}